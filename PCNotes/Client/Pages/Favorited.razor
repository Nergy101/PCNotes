@page "/favorited"
@using PCNotes.Shared
@using PCNotes.Client.Components
@using Toolbelt.Blazor.HotKeys
@using Blazm.Bluetooth
@inject IMatToaster Toaster
@inject HotKeys HotKeys
@inject BluetoothNavigator BluetoothNavigator
@inject HttpClient Http
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <MatH1>Favorited</MatH1>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <MatTextField @bind-Value="@CreatorName" FullWidth="true" Label="Who are you?" Icon="person" IconTrailing="false"></MatTextField>
                </div>

                @if (!string.IsNullOrWhiteSpace(CreatorName))
                {
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                        <MatTextField @bind-Value="@SearchTerm" Label="Search" Icon="@MatIconNames.Search" IconTrailing="false" FullWidth="true"></MatTextField>

                        @if (Notes?.Count == 1)
                        {
                            var noteGroupsByWeek = Notes.OrderByDescending(n => n.CreationTime).GroupBy(n => new { n.CreationTime.Year, n.CreationTime.Month }).ToList();

                            foreach (var noteGroup in noteGroupsByWeek)
                            {
                                var notes = noteGroup.ToList();
                                <MatH6>@notes[0].CreationTime.ToString("yyyy-MM")</MatH6>
                                <MatAccordion Multi="true">
                                    @foreach (var note in notes)
                                    {
                                        <PCNote Note="@note" CreatorName="@CreatorName" OnDelete="() => { }" DeletionEnabled="false"></PCNote>
                                    }
                                </MatAccordion>

                                @if (noteGroup != noteGroupsByWeek.Last())
                                {
                                    <div style="margin-top: 2em; margin-bottom: 1em;">
                                        <MatDivider></MatDivider>
                                    </div>
                                }
                            }
                        }
                        else if (Notes.Count > 1)
                        {
                            var noteGroupsByWeek = Notes.OrderByDescending(n => n.CreationTime).GroupBy(n => new { n.CreationTime.Year, n.CreationTime.Month }).ToList();

                            foreach (var noteGroup in noteGroupsByWeek)
                            {
                                var notes = noteGroup.ToList();
                                <MatH6>@notes[0].CreationTime.ToString("yyyy-MM")</MatH6>
                                <MatAccordion Multi="true">
                                    @foreach (var note in notes)
                                    {
                                        <PCNote Note="@note" CreatorName="@CreatorName" OnDelete="() => { }" DeletionEnabled="false"></PCNote>
                                    }
                                </MatAccordion>

                                @if (noteGroup != noteGroupsByWeek.Last())
                                {
                                    <div style="margin-top: 2em; margin-bottom: 1em;">
                                        <MatDivider></MatDivider>
                                    </div>
                                }
                            }
                        }
                        else if (Notes == null)
                        {
                            <MatProgressBar Indeterminate="true"></MatProgressBar>
                        }

                    </div>
                }
            </div>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
    </div>
</div>

@code {
    public List<Note> Notes { get; set; }
    public Dictionary<Note, string> NewCheckListItemTexts { get; set; } = new Dictionary<Note, string>();

    public string _searchTerm;
    public string SearchTerm
    {
        get { return _searchTerm; }
        set
        {
            FilterNotes(value);
            _searchTerm = value;
        }
    }

    private string _creatorName;

    public string CreatorName
    {
        get
        {
            return _creatorName;
        }
        set
        {
            localStorage.SetItemAsString("name", value);
            _creatorName = value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var creatorName = localStorage.GetItem<string>("name");
            if (string.IsNullOrEmpty(creatorName))
            {
                localStorage.SetItemAsString("name", "");
            }
            else
            {
                _creatorName = creatorName;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var notes = await Http.GetFromJsonAsync<List<Note>>("api/notes");
        notes = notes.Where(n => n.Favorited).ToList();
        notes.ForEach(n => NewCheckListItemTexts.Add(n, ""));
        Notes = notes;

        StateHasChanged();
    }

    private async Task FilterNotes(string searchterm)
    {
        var notes = await Http.GetFromJsonAsync<List<Note>>($"api/notes/search?searchterm={searchterm}");
        notes.ForEach(n => NewCheckListItemTexts.Add(n, ""));
        Notes = notes;
        StateHasChanged();
    }
}
